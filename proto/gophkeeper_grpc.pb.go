// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/gophkeeper.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Users_Register_FullMethodName = "/gophkeeper.Users/Register"
	Users_Login_FullMethodName    = "/gophkeeper.Users/Login"
)

// UsersClient is the client API for Users service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type usersClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersClient(cc grpc.ClientConnInterface) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, Users_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, Users_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServer is the server API for Users service.
// All implementations must embed UnimplementedUsersServer
// for forward compatibility.
type UsersServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	mustEmbedUnimplementedUsersServer()
}

// UnimplementedUsersServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUsersServer struct{}

func (UnimplementedUsersServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUsersServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUsersServer) mustEmbedUnimplementedUsersServer() {}
func (UnimplementedUsersServer) testEmbeddedByValue()               {}

// UnsafeUsersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServer will
// result in compilation errors.
type UnsafeUsersServer interface {
	mustEmbedUnimplementedUsersServer()
}

func RegisterUsersServer(s grpc.ServiceRegistrar, srv UsersServer) {
	// If the following call pancis, it indicates UnimplementedUsersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Users_ServiceDesc, srv)
}

func _Users_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Users_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Users_ServiceDesc is the grpc.ServiceDesc for Users service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Users_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Users_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Users_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/gophkeeper.proto",
}

const (
	Passwords_Get_FullMethodName    = "/gophkeeper.Passwords/Get"
	Passwords_Add_FullMethodName    = "/gophkeeper.Passwords/Add"
	Passwords_Update_FullMethodName = "/gophkeeper.Passwords/Update"
	Passwords_Delete_FullMethodName = "/gophkeeper.Passwords/Delete"
)

// PasswordsClient is the client API for Passwords service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PasswordsClient interface {
	Get(ctx context.Context, in *PasswordRequest, opts ...grpc.CallOption) (*PasswordResponse, error)
	Add(ctx context.Context, in *PasswordCreateRequest, opts ...grpc.CallOption) (*PasswordShortResponse, error)
	Update(ctx context.Context, in *PasswordUpdateRequest, opts ...grpc.CallOption) (*PasswordShortResponse, error)
	Delete(ctx context.Context, in *PasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type passwordsClient struct {
	cc grpc.ClientConnInterface
}

func NewPasswordsClient(cc grpc.ClientConnInterface) PasswordsClient {
	return &passwordsClient{cc}
}

func (c *passwordsClient) Get(ctx context.Context, in *PasswordRequest, opts ...grpc.CallOption) (*PasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PasswordResponse)
	err := c.cc.Invoke(ctx, Passwords_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordsClient) Add(ctx context.Context, in *PasswordCreateRequest, opts ...grpc.CallOption) (*PasswordShortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PasswordShortResponse)
	err := c.cc.Invoke(ctx, Passwords_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordsClient) Update(ctx context.Context, in *PasswordUpdateRequest, opts ...grpc.CallOption) (*PasswordShortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PasswordShortResponse)
	err := c.cc.Invoke(ctx, Passwords_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordsClient) Delete(ctx context.Context, in *PasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Passwords_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PasswordsServer is the server API for Passwords service.
// All implementations must embed UnimplementedPasswordsServer
// for forward compatibility.
type PasswordsServer interface {
	Get(context.Context, *PasswordRequest) (*PasswordResponse, error)
	Add(context.Context, *PasswordCreateRequest) (*PasswordShortResponse, error)
	Update(context.Context, *PasswordUpdateRequest) (*PasswordShortResponse, error)
	Delete(context.Context, *PasswordRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedPasswordsServer()
}

// UnimplementedPasswordsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPasswordsServer struct{}

func (UnimplementedPasswordsServer) Get(context.Context, *PasswordRequest) (*PasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPasswordsServer) Add(context.Context, *PasswordCreateRequest) (*PasswordShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedPasswordsServer) Update(context.Context, *PasswordUpdateRequest) (*PasswordShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPasswordsServer) Delete(context.Context, *PasswordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPasswordsServer) mustEmbedUnimplementedPasswordsServer() {}
func (UnimplementedPasswordsServer) testEmbeddedByValue()                   {}

// UnsafePasswordsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PasswordsServer will
// result in compilation errors.
type UnsafePasswordsServer interface {
	mustEmbedUnimplementedPasswordsServer()
}

func RegisterPasswordsServer(s grpc.ServiceRegistrar, srv PasswordsServer) {
	// If the following call pancis, it indicates UnimplementedPasswordsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Passwords_ServiceDesc, srv)
}

func _Passwords_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Passwords_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordsServer).Get(ctx, req.(*PasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Passwords_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordsServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Passwords_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordsServer).Add(ctx, req.(*PasswordCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Passwords_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Passwords_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordsServer).Update(ctx, req.(*PasswordUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Passwords_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Passwords_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordsServer).Delete(ctx, req.(*PasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Passwords_ServiceDesc is the grpc.ServiceDesc for Passwords service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Passwords_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.Passwords",
	HandlerType: (*PasswordsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Passwords_Get_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _Passwords_Add_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Passwords_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Passwords_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/gophkeeper.proto",
}

const (
	Cards_Get_FullMethodName    = "/gophkeeper.Cards/Get"
	Cards_Add_FullMethodName    = "/gophkeeper.Cards/Add"
	Cards_Update_FullMethodName = "/gophkeeper.Cards/Update"
	Cards_Delete_FullMethodName = "/gophkeeper.Cards/Delete"
)

// CardsClient is the client API for Cards service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardsClient interface {
	Get(ctx context.Context, in *CardRequest, opts ...grpc.CallOption) (*CardResponse, error)
	Add(ctx context.Context, in *CardCreateRequest, opts ...grpc.CallOption) (*CardShortResponse, error)
	Update(ctx context.Context, in *CardUpdateRequest, opts ...grpc.CallOption) (*CardShortResponse, error)
	Delete(ctx context.Context, in *CardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type cardsClient struct {
	cc grpc.ClientConnInterface
}

func NewCardsClient(cc grpc.ClientConnInterface) CardsClient {
	return &cardsClient{cc}
}

func (c *cardsClient) Get(ctx context.Context, in *CardRequest, opts ...grpc.CallOption) (*CardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CardResponse)
	err := c.cc.Invoke(ctx, Cards_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardsClient) Add(ctx context.Context, in *CardCreateRequest, opts ...grpc.CallOption) (*CardShortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CardShortResponse)
	err := c.cc.Invoke(ctx, Cards_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardsClient) Update(ctx context.Context, in *CardUpdateRequest, opts ...grpc.CallOption) (*CardShortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CardShortResponse)
	err := c.cc.Invoke(ctx, Cards_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardsClient) Delete(ctx context.Context, in *CardRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cards_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardsServer is the server API for Cards service.
// All implementations must embed UnimplementedCardsServer
// for forward compatibility.
type CardsServer interface {
	Get(context.Context, *CardRequest) (*CardResponse, error)
	Add(context.Context, *CardCreateRequest) (*CardShortResponse, error)
	Update(context.Context, *CardUpdateRequest) (*CardShortResponse, error)
	Delete(context.Context, *CardRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCardsServer()
}

// UnimplementedCardsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCardsServer struct{}

func (UnimplementedCardsServer) Get(context.Context, *CardRequest) (*CardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCardsServer) Add(context.Context, *CardCreateRequest) (*CardShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedCardsServer) Update(context.Context, *CardUpdateRequest) (*CardShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCardsServer) Delete(context.Context, *CardRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCardsServer) mustEmbedUnimplementedCardsServer() {}
func (UnimplementedCardsServer) testEmbeddedByValue()               {}

// UnsafeCardsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardsServer will
// result in compilation errors.
type UnsafeCardsServer interface {
	mustEmbedUnimplementedCardsServer()
}

func RegisterCardsServer(s grpc.ServiceRegistrar, srv CardsServer) {
	// If the following call pancis, it indicates UnimplementedCardsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Cards_ServiceDesc, srv)
}

func _Cards_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cards_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardsServer).Get(ctx, req.(*CardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cards_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardsServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cards_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardsServer).Add(ctx, req.(*CardCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cards_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cards_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardsServer).Update(ctx, req.(*CardUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cards_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cards_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardsServer).Delete(ctx, req.(*CardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cards_ServiceDesc is the grpc.ServiceDesc for Cards service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cards_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.Cards",
	HandlerType: (*CardsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Cards_Get_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _Cards_Add_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Cards_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Cards_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/gophkeeper.proto",
}

const (
	Binaries_Get_FullMethodName    = "/gophkeeper.Binaries/Get"
	Binaries_Add_FullMethodName    = "/gophkeeper.Binaries/Add"
	Binaries_Update_FullMethodName = "/gophkeeper.Binaries/Update"
	Binaries_Delete_FullMethodName = "/gophkeeper.Binaries/Delete"
)

// BinariesClient is the client API for Binaries service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BinariesClient interface {
	Get(ctx context.Context, in *BinariesRequest, opts ...grpc.CallOption) (*BinariesResponse, error)
	Add(ctx context.Context, in *BinariesCreateRequest, opts ...grpc.CallOption) (*BinariesShortResponse, error)
	Update(ctx context.Context, in *BinariesUpdateRequest, opts ...grpc.CallOption) (*BinariesShortResponse, error)
	Delete(ctx context.Context, in *BinariesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type binariesClient struct {
	cc grpc.ClientConnInterface
}

func NewBinariesClient(cc grpc.ClientConnInterface) BinariesClient {
	return &binariesClient{cc}
}

func (c *binariesClient) Get(ctx context.Context, in *BinariesRequest, opts ...grpc.CallOption) (*BinariesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BinariesResponse)
	err := c.cc.Invoke(ctx, Binaries_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binariesClient) Add(ctx context.Context, in *BinariesCreateRequest, opts ...grpc.CallOption) (*BinariesShortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BinariesShortResponse)
	err := c.cc.Invoke(ctx, Binaries_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binariesClient) Update(ctx context.Context, in *BinariesUpdateRequest, opts ...grpc.CallOption) (*BinariesShortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BinariesShortResponse)
	err := c.cc.Invoke(ctx, Binaries_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binariesClient) Delete(ctx context.Context, in *BinariesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Binaries_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BinariesServer is the server API for Binaries service.
// All implementations must embed UnimplementedBinariesServer
// for forward compatibility.
type BinariesServer interface {
	Get(context.Context, *BinariesRequest) (*BinariesResponse, error)
	Add(context.Context, *BinariesCreateRequest) (*BinariesShortResponse, error)
	Update(context.Context, *BinariesUpdateRequest) (*BinariesShortResponse, error)
	Delete(context.Context, *BinariesRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBinariesServer()
}

// UnimplementedBinariesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBinariesServer struct{}

func (UnimplementedBinariesServer) Get(context.Context, *BinariesRequest) (*BinariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBinariesServer) Add(context.Context, *BinariesCreateRequest) (*BinariesShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedBinariesServer) Update(context.Context, *BinariesUpdateRequest) (*BinariesShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBinariesServer) Delete(context.Context, *BinariesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBinariesServer) mustEmbedUnimplementedBinariesServer() {}
func (UnimplementedBinariesServer) testEmbeddedByValue()                  {}

// UnsafeBinariesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BinariesServer will
// result in compilation errors.
type UnsafeBinariesServer interface {
	mustEmbedUnimplementedBinariesServer()
}

func RegisterBinariesServer(s grpc.ServiceRegistrar, srv BinariesServer) {
	// If the following call pancis, it indicates UnimplementedBinariesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Binaries_ServiceDesc, srv)
}

func _Binaries_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinariesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Binaries_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinariesServer).Get(ctx, req.(*BinariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Binaries_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinariesCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinariesServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Binaries_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinariesServer).Add(ctx, req.(*BinariesCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Binaries_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinariesUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinariesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Binaries_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinariesServer).Update(ctx, req.(*BinariesUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Binaries_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinariesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Binaries_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinariesServer).Delete(ctx, req.(*BinariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Binaries_ServiceDesc is the grpc.ServiceDesc for Binaries service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Binaries_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.Binaries",
	HandlerType: (*BinariesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Binaries_Get_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _Binaries_Add_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Binaries_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Binaries_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/gophkeeper.proto",
}
